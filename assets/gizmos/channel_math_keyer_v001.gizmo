#! C:/Program Files/Nuke14.1v2/nuke-14.1.2.dll -nx
version 14.1 v2
Group {
 name ChannelMathKeyer
 knobChanged "\n\nn = nuke.thisNode()\nk = nuke.thisKnob()\n\n\n\nif k.name() in (\"first_channel\", \"second_channel\", \"third_channel\"): # Only affect channel knobs\n\n    # Define the channel mappings\n    red_mapping = \[(0, 'rgba.red', 'rgba.red'), (0, 'rgba.red', 'rgba.green'), (0, 'rgba.red', 'rgba.blue'), (0, 'rgba.red', 'rgba.alpha')]\n        \n    green_mapping = \[(0, 'rgba.green', 'rgba.red'), (0, 'rgba.green', 'rgba.green'), (0, 'rgba.green', 'rgba.blue'), (0, 'rgba.green', 'rgba.alpha')]\n        \n    blue_mapping = \[(0, 'rgba.blue', 'rgba.red'), (0, 'rgba.blue', 'rgba.green'), (0, 'rgba.blue', 'rgba.blue'), (0, 'rgba.blue', 'rgba.alpha')]\n        \n    no_mapping = \[(-1, 'black', 'rgba.red'), (-1, 'black', 'rgba.green'), (-1, 'black', 'rgba.blue'), (-1, 'black', 'rgba.alpha')]\n\n    enable = True\n    disable = False\n    # Assign corresponding shuffle node to channel knob\n    with n:\n        if k.name() == \"first_channel\":\n            shuffle = nuke.toNode(\"Shuffle1\")\n            merge = nuke.toNode(\"Merge1\")\n            grade = nuke.toNode(\"Grade1\")\n            toggle = nuke.toNode('Switch1')\n        elif k.name() == \"second_channel\":\n            shuffle = nuke.toNode(\"Shuffle2\")\n            merge = nuke.toNode(\"Merge1\")\n            grade = nuke.toNode(\"Grade2\")\n        elif k.name() == \"third_channel\":\n            shuffle = nuke.toNode(\"Shuffle3\")\n            merge = nuke.toNode(\"Merge2\")\n            grade = nuke.toNode(\"Grade3\")\n        shuffle_mappings = shuffle.knob('mappings')\n        #merge_operation = merge.knob('operation')\n        #grade_blackpoint = grade.knob('blackpoint')\n        #grade_whitepoint = grade.knob('whitepoint')\n\n            \n        \n    # Set value of shuffle according to channel knob value\n    with n:   \n        if k.value() == 'red':\n            shuffle_mappings.setValue(red_mapping)\n        elif k.value() == 'green':\n            shuffle_mappings.setValue(green_mapping)\n        elif k.value() == 'blue':\n            shuffle_mappings.setValue(blue_mapping)\n        elif k.value() == 'none':\n            shuffle_mappings.setValue(no_mapping)\n                \n        else:\n            print(\"Error occurred\")\n\n    with n:\n        if k.name() == \"first_channel\":\n            if k.value() == \"none\":\n                toggle.knob('which').setValue(1.0)\n            else:\n                toggle.knob('which').setValue(0)\n        else:\n            pass\n\n    with n:\n        if k.value() == 'none':\n            merge.knob('disable').setValue(True)\n            grade.knob('disable').setValue(True)\n        else:\n            merge.knob('disable').setValue(False)\n            grade.knob('disable').setValue(False)\n\n\n"
 tile_color 0x5ff00ff
 addUserKnob {20 ChannelMatheKeyer l ChannelMathKeyer}
 addUserKnob {52 change_values T "nuke.thisNode().knob('knobChanged').setValue(\"\"\"\n\nn = nuke.thisNode()\nk = nuke.thisKnob()\n\n\n\nif k.name() in (\"first_channel\", \"second_channel\", \"third_channel\"): # Only affect channel knobs\n\n    # Define the channel mappings\n    red_mapping = \[(0, 'rgba.red', 'rgba.red'), (0, 'rgba.red', 'rgba.green'), (0, 'rgba.red', 'rgba.blue'), (0, 'rgba.red', 'rgba.alpha')]\n        \n    green_mapping = \[(0, 'rgba.green', 'rgba.red'), (0, 'rgba.green', 'rgba.green'), (0, 'rgba.green', 'rgba.blue'), (0, 'rgba.green', 'rgba.alpha')]\n        \n    blue_mapping = \[(0, 'rgba.blue', 'rgba.red'), (0, 'rgba.blue', 'rgba.green'), (0, 'rgba.blue', 'rgba.blue'), (0, 'rgba.blue', 'rgba.alpha')]\n        \n    no_mapping = \[(-1, 'black', 'rgba.red'), (-1, 'black', 'rgba.green'), (-1, 'black', 'rgba.blue'), (-1, 'black', 'rgba.alpha')]\n\n    enable = True\n    disable = False\n    # Assign corresponding shuffle node to channel knob\n    with n:\n        if k.name() == \"first_channel\":\n            shuffle = nuke.toNode(\"Shuffle1\")\n            merge = nuke.toNode(\"Merge1\")\n            grade = nuke.toNode(\"Grade1\")\n            toggle = nuke.toNode('Switch1')\n        elif k.name() == \"second_channel\":\n            shuffle = nuke.toNode(\"Shuffle2\")\n            merge = nuke.toNode(\"Merge1\")\n            grade = nuke.toNode(\"Grade2\")\n        elif k.name() == \"third_channel\":\n            shuffle = nuke.toNode(\"Shuffle3\")\n            merge = nuke.toNode(\"Merge2\")\n            grade = nuke.toNode(\"Grade3\")\n        shuffle_mappings = shuffle.knob('mappings')\n        #merge_operation = merge.knob('operation')\n        #grade_blackpoint = grade.knob('blackpoint')\n        #grade_whitepoint = grade.knob('whitepoint')\n\n            \n        \n    # Set value of shuffle according to channel knob value\n    with n:   \n        if k.value() == 'red':\n            shuffle_mappings.setValue(red_mapping)\n        elif k.value() == 'green':\n            shuffle_mappings.setValue(green_mapping)\n        elif k.value() == 'blue':\n            shuffle_mappings.setValue(blue_mapping)\n        elif k.value() == 'none':\n            shuffle_mappings.setValue(no_mapping)\n                \n        else:\n            print(\"Error occurred\")\n\n    with n:\n        if k.name() == \"first_channel\":\n            if k.value() == \"none\":\n                toggle.knob('which').setValue(1.0)\n            else:\n                toggle.knob('which').setValue(0)\n        else:\n            pass\n\n    with n:\n        if k.value() == 'none':\n            merge.knob('disable').setValue(True)\n            grade.knob('disable').setValue(True)\n        else:\n            merge.knob('disable').setValue(False)\n            grade.knob('disable').setValue(False)\n\n\n\"\"\")" +STARTLINE}
 tile_color 0x5ff00ff
 addUserKnob {4 first_channel l "first channel" M {red green blue none}}
 addUserKnob {41 blackpoint T Grade1.blackpoint}
 addUserKnob {41 whitepoint T Grade1.whitepoint}
 addUserKnob {26 ""}
 addUserKnob {41 operation T Merge1.operation}
 addUserKnob {26 ""}
 addUserKnob {4 second_channel l "second channel" M {red green blue none}}
 second_channel green
 addUserKnob {41 blackpoint_1 l blackpoint T Grade2.blackpoint}
 addUserKnob {41 whitepoint_1 l whitepoint T Grade2.whitepoint}
 addUserKnob {26 ""}
 addUserKnob {41 operation_1 l operation T Merge2.operation}
 addUserKnob {26 ""}
 addUserKnob {4 third_channel l "third channel" M {red green blue none}}
 third_channel blue
 addUserKnob {41 blackpoint_2 l blackpoint T Grade3.blackpoint}
 addUserKnob {41 whitepoint_2 l whitepoint T Grade3.whitepoint}
}
 Input {
  inputs 0
  name Input1
  xpos -452
  ypos -813
 }
 Dot {
  name Dot5
  xpos -418
  ypos -700
 }
set N5b028000 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.blue 0 2 rgba.red 0 0 rgba.blue 0 2 rgba.green 0 1 rgba.blue 0 2 rgba.blue 0 2 rgba.blue 0 2 rgba.alpha 0 3"
  name Shuffle3
  xpos -316
  ypos -548
 }
 Grade {
  channels rgba
  name Grade3
  xpos -316
  ypos -474
 }
 Dot {
  name Dot1
  xpos -282
  ypos -195
 }
push $N5b028000
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.green 0 1 rgba.red 0 0 rgba.green 0 1 rgba.green 0 1 rgba.green 0 1 rgba.blue 0 2 rgba.green 0 1 rgba.alpha 0 3"
  name Shuffle2
  xpos -452
  ypos -547
 }
 Grade {
  channels rgba
  name Grade2
  xpos -452
  ypos -477
 }
 Dot {
  name Dot2
  xpos -418
  ypos -388
 }
set N5b029800 [stack 0]
 Dot {
  name Dot4
  xpos -418
  ypos -311
 }
push $N5b029800
push $N5b028000
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.red 0 0 rgba.red 0 0 rgba.red 0 0 rgba.green 0 1 rgba.red 0 0 rgba.blue 0 2 rgba.red 0 0 rgba.alpha 0 3"
  name Shuffle1
  xpos -575
  ypos -548
 }
 Grade {
  channels rgba
  name Grade1
  xpos -575
  ypos -482
 }
 Merge2 {
  inputs 2
  operation plus
  bbox B
  name Merge1
  xpos -575
  ypos -391
 }
 Switch {
  inputs 2
  name Switch1
  xpos -575
  ypos -314
 }
 Merge2 {
  inputs 2
  operation plus
  bbox B
  name Merge2
  xpos -576
  ypos -198
 }
push $N5b028000
 Dot {
  name Dot3
  xpos -673
  ypos -700
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy1
  xpos -707
  ypos -204
 }
 Output {
  name Output1
  xpos -707
  ypos -104
 }
end_group
